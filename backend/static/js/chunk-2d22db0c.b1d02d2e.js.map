{"version":3,"sources":["webpack:///./node_modules/chartjs/chart.js"],"names":["Math","log2","x","log","LN2","log10","LN10","Helpers","avg","arr","v","index","length","min","v2","Array","isArray","max","upperMax","lowerMin","Infinity","isNaN","isFinite","niceNumbers","range","round","niceFraction","exponent","floor","fraction","pow","getLinearTicks","maxTicks","tickSpacing","ceil","getFont","options","style","variant","weight","size","family","join","getAxisRatio","value","BarChart","ctx","key","this","mouseListeners","currentHint","fillRegions","font","fontWeight","fontSizeTitle","fontSizeAxes","fontSizeTicks","fontSizeLabels","fontDataTags","fontSizeLegend","fontSizeHint","paddingPercentBars","paddingPercentTicks","paddingPixelsVertical","paddingPixelsHorizontal","paddingPixelsTicks","maxWidthBars","fillColorBackground","strokeColorBars","fillColorBars","scaleStyle","barStyle","stackedBarPadding","defaultMaxTick","pixelsLegendSquare","radiusDot","fillColorLegend","tickFormatter","tickFormatterMeasure","fillRegion","hasOwnProperty","content","labelPositions","prototype","update","Error","labels","data","_data_standard_deviation","_data_standard_error","i","isArr","i3","mean","acc","i2","sqrt","push","redraw","setTimeout","_draw","bind","mousemove","y","res","ch","drawIndex","width","canvas","height","clearRect","translate","remainingWidth","remainingHeight","save","fillStyle","fillRect","restore","topYPadding","title","textAlign","fillText","leftXPadding","maxChartValue","minChartValue","leftXDrawYLabel","yAxis","cmIndex","doB","tempSum","ii2","indexOf","floater","parseFloat","split","bars","cbv","maxYAxisTickWidth","measureText","legend","maxLWidth","lIndex","label","bSX","bSY","legendEntriesPerLine","lLReqHeight","bottomYPadding","strokeStyle","beginPath","moveTo","lineTo","stroke","fill","legLine","legCol","color","boxX","boxY","xAxis","widthPerBar","topLabels","reqWidth","dataTags","index2","computedBarPadding","wwh","maxTextWidth","maxTextStackSize","tLabel","xLabelsRotated","rotate","PI","lastLabelY","cLabel","yUp","remVal","boundX1","boundX2","boundY1","boundY2","xStart","xEnd","yStart","yEnd","topLabel","tickMeta","alpha","ticks","tickHeight","toString","cBar","renderBarY","lastData","fillColorForIndex","strokeColorForIndex","fillColor","strokeColor","vIsArr","renderStartX","runningValue","lastHeight","renderBarHeight","renderUpToY","abs","tSX","tSY","tEX","tEY","tagText","barPadP","hints","hint","sx","sy","ex","ey","minX","maxX","minY","maxY","rect","left","right","top","bottom","text","oFS","barTooltips","rbx","lDu","sFS","nLData","renderBarHeight3","renderUpToY3","rby","tLX","tLY","arc","prev","next","balls","ball","radius","val","renderBarHeight2","renderUpToY2","renderBarError","wiskerWidth","x_","hRect","boxWidth","boxWidthPadding","lineHeight","boxHeight","drawX","drawY","module","exports","window"],"mappings":"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","file":"../static/js/chunk-2d22db0c.b1d02d2e.js","sourcesContent":["/*global module:true*/\n'use strict';\n\nMath.log2 = Math.log2 || function(x) {\n  return Math.log(x) / Math.LN2;\n};\n\nMath.log10 = Math.log10 || function(x) {\n  return Math.log(x) / Math.LN10;\n};\n\n(function() {\n  var Helpers = {\n    avg: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        v += arr[index];\n      }\n      return v / arr.length;\n    },\n    min: function(arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0];\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 < v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    max: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 > v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    upperMax: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.max(v2);\n        if (v2 > v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    lowerMin: function(arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0] || Infinity;\n      if (Array.isArray(v)) v = Helpers.lowerMin(v);\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (v2 == null) continue;\n        if (Array.isArray(v2)) v2 = Helpers.lowerMin(v2);\n        if (v2 < v) v = v2;\n      }\n      if (isNaN(v) || !isFinite(v)) v = 0;\n      return Math.max(0, v);\n    },\n    niceNumbers: function(range, round) {\n      var exponent = Math.floor(Math.log10(range));\n      var fraction = range / Math.pow(10, exponent);\n      var niceFraction;\n      if (round) {\n        if (fraction < 1.5) niceFraction = 1;\n        else if (fraction < 3) niceFraction = 2;\n        else if (fraction < 7) niceFraction = 5;\n        else niceFraction = 10;\n      } else {\n        if (fraction <= 1.0) niceFraction = 1;\n        else if (fraction <= 2) niceFraction = 2;\n        else if (fraction <= 5) niceFraction = 5;\n        else niceFraction = 10;\n      }\n      return niceFraction * Math.pow(10, exponent);\n    },\n    getLinearTicks: function(min, max, maxTicks) {\n      var range = Helpers.niceNumbers(max - min, false);\n      var tickSpacing = Helpers.niceNumbers(range / (maxTicks - 1), true);\n      return [\n        Math.floor(min / tickSpacing) * tickSpacing,\n        Math.ceil(max / tickSpacing) * tickSpacing,\n        tickSpacing\n      ];\n    },\n    getFont: function(options) {\n      options.style = options.style || 'normal';\n      options.variant = options.variant || 'normal';\n      options.weight = options.weight || 'lighter';\n      options.size = options.size || '12';\n      options.family = options.family || 'Arial';\n      return [options.style, options.variant, options.weight, options.size + 'px', options.family].join(' ');\n    },\n    getAxisRatio: function(min, max, value) {\n      return (value - min) / (max - min);\n    }\n  };\n\n  var BarChart = (function() {\n    function BarChart(ctx, options) {\n      this.mouseListeners = [];\n      this.currentHint = null;\n      this.fillRegions = []\n      this.options = {\n        font: 'Helvetica',\n        fontWeight: 'normal',\n        fontSizeTitle: 24,\n        fontSizeAxes: 20,\n        fontSizeTicks: 18,\n        fontSizeLabels: 18,\n        fontDataTags: 18,\n        fontSizeLegend: 18,\n        fontSizeHint: 18,\n        paddingPercentBars: 0.10,\n        paddingPercentTicks: 0.15,\n        paddingPixelsVertical: 10,\n        paddingPixelsHorizontal: 10,\n        paddingPixelsTicks: 10,\n        maxWidthBars: 0,\n        fillColorBackground: 'rgb(255, 255, 255)',\n        strokeColorBars: 'rgb(0, 0, 0)',\n        fillColorBars: 'rgba(180, 180, 180, 0.25)',\n        scaleStyle: 'linear',\n        barStyle: 'none',\n        stackedBarPadding: 3,\n        defaultMaxTick: 0,\n        pixelsLegendSquare: 10,\n        radiusDot: 5,\n        fillColorLegend: 'rgb(230, 230, 230)',\n        tickFormatter: null,\n        tickFormatterMeasure: null,\n        fillRegion: 'normal'\n      };\n      options = options || { };\n      for (var key in this.options) {\n        if (options.hasOwnProperty(key)) this.options[key] = options[key];\n      }\n      this.ctx = ctx;\n      this.content = { };\n      this.labelPositions = { }\n    }\n\n    BarChart.prototype.update = function(content) {\n      if (typeof content !== 'object') {\n        throw new Error('Collections must be objects.');\n      } else if (!(content.hasOwnProperty('labels') && content.hasOwnProperty('data'))) {\n        throw new Error('Collection must specify labels and data.');\n      } else if (!(Array.isArray(content.labels) && Array.isArray(content.data))) {\n        throw new Error('Labels and data must be arrays.');\n      } else if (content.labels.length !== content.data.length) {\n        throw new Error('Labels and data length must match.');\n      }\n      content._data_standard_deviation = [];\n      content._data_standard_error = [];\n      for (var i = 0; i < content.data.length; ++i) {\n        var isArr = Array.isArray(content.data[i]);\n        if (this.options.scaleStyle === 'log2') {\n          if (isArr) {\n            for (var i3 = 0; i3 < content.data[i].length; ++i3) content.data[i][i3] = Math.log2(content.data[i][i3]);\n          } else content.data[i] = Math.log2(content.data[i]);\n        }\n        if (isArr) {\n          var mean = Helpers.avg(content.data[i]);\n          var acc = 0;\n          for (var i2 = 0; i2 < content.data[i].length; ++i2) acc += Math.pow(mean - content.data[i][i2], 2);\n          acc = Math.sqrt(acc / (content.data[i].length - 1));\n          content._data_standard_deviation.push(acc);\n          content._data_standard_error.push(acc / Math.sqrt(content.data[i].length));\n        } else {\n          content._data_standard_deviation.push(0);\n          content._data_standard_error.push(0);\n        }\n      }\n      this.content = content;\n      this.redraw();\n    };\n\n    BarChart.prototype.redraw = function() {\n      setTimeout(function() {\n        this._draw();\n      }.bind(this), 0);\n    };\n\n    BarChart.prototype.mousemove = function(x, y) {\n      var res = null;\n      for (var index = 0; index < this.mouseListeners.length; ++index) {\n        if ((res = this.mouseListeners[index](x, y))) break;\n      }\n      if (!res || (typeof res) !== 'object' || !res.hasOwnProperty('index') || !res.hasOwnProperty('drawIndex')) {\n        if (this.currentHint !== null) {\n          this.currentHint = null;\n          this.redraw();\n        }\n        return;\n      }\n      var ch = this.currentHint;\n      if (ch == null || ch.index != res.index || ch.drawIndex != res.drawIndex) {\n        this.currentHint = res;\n        this.redraw();\n      }\n    };\n\n    BarChart.prototype._draw = function() {\n      var labelPositions = { }\n      this.mouseListeners = [];\n      this.fillRegions = [];\n\n      var options = this.options;\n      var ctx = this.ctx, content = this.content;\n      var width = ctx.canvas.width, height = ctx.canvas.height;\n      ctx.clearRect(0, 0, width, height);\n      ctx.translate(-0.5, -0.5);\n      var remainingWidth = width, remainingHeight = height;\n      var index;\n\n      if (options.fillColorBackground != null) {\n        ctx.save();\n        ctx.fillStyle = options.fillColorBackground;\n        ctx.fillRect(0, 0, width, height);\n        ctx.restore();\n      }\n\n      var topYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      /* Draw title of bar chart */\n      if (content.title != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTitle, family: options.font });\n        ctx.textAlign = 'center';\n        ctx.fillText(content.title, width / 2, topYPadding + options.fontSizeTitle);\n        ctx.restore();\n        remainingHeight -= options.fontSizeTitle * 1.25;\n        topYPadding += options.fontSizeTitle * 1.25;\n      }\n\n      /* Compute required left padding */\n      var leftXPadding = options.paddingPixelsVertical;\n      remainingWidth  -= options.paddingPixelsVertical;\n\n      var leftXDrawYLabel = null;\n      if (content.yAxis != null) {\n        leftXDrawYLabel = leftXPadding + options.fontSizeAxes * 0.5;\n        remainingWidth -= options.fontSizeAxes * 1.25;\n        leftXPadding += options.fontSizeAxes * 1.25;\n      }\n\n      ctx.save();\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTicks, family: options.font });\n      var maxChartValue, minChartValue;\n      if (options.barStyle === 'stacked') {\n        maxChartValue = 0;\n        minChartValue = Infinity;\n        for (var cmIndex = 0; cmIndex < content.data.length; ++cmIndex) {\n          var doB;\n          if (Array.isArray(doB = content.data[cmIndex])) {\n            var tempSum = 0;\n            for (var ii2 = 0; ii2 < doB.length; ++ii2) tempSum += doB[ii2];\n            maxChartValue = Math.max(maxChartValue, tempSum);\n            minChartValue = Math.min(minChartValue, tempSum);\n          } else {\n            maxChartValue = Math.max(maxChartValue, content.data[cmIndex]);\n            minChartValue = Math.min(minChartValue, content.data[cmIndex]);\n          }\n        }\n      } else {\n        maxChartValue = Helpers.upperMax(content.data);\n        minChartValue = Helpers.lowerMin(content.data);\n      }\n      if (options.scaleStyle.indexOf('adaptive') === 0) {\n        if (options.scaleStyle.indexOf(':') !== -1) {\n          var floater = parseFloat(options.scaleStyle.split(/[:]/)[1]);\n          minChartValue *= floater;\n          maxChartValue *= 1 + (1 - floater) / 2.0;\n        }\n      } else minChartValue = 0;\n      if (options.defaultMaxTick > maxChartValue) maxChartValue = options.defaultMaxTick;\n      if (content.bars != null && Array.isArray(content.bars)) {\n        for (index = 0; index < content.bars.length; ++index) {\n          var cbv = content.bars[index].value;\n          if (isNaN(cbv)) continue;\n          maxChartValue = Math.max(maxChartValue, cbv);\n          minChartValue = Math.min(minChartValue, cbv);\n        }\n      }\n      var maxYAxisTickWidth = options.scaleStyle == 'log2' ? Math.ceil(Math.pow(2, maxChartValue)) : (Math.ceil(maxChartValue) + '.00');\n      if (options.tickFormatterMeasure != null) maxYAxisTickWidth = options.tickFormatterMeasure;\n      maxYAxisTickWidth = ctx.measureText(maxYAxisTickWidth).width;\n      maxYAxisTickWidth = Math.ceil(maxYAxisTickWidth) + options.paddingPixelsTicks;\n      remainingWidth -= maxYAxisTickWidth;\n      leftXPadding += maxYAxisTickWidth;\n      ctx.restore();\n\n      var rightXPadding = options.paddingPixelsVertical;\n      remainingWidth -= options.paddingPixelsVertical;\n\n      /* Draw legend */\n      if (content.legend != null && Array.isArray(content.legend)) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLegend, family: options.font });\n        var maxLWidth = 0;\n        for (var lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          maxLWidth = Math.max(maxLWidth, ctx.measureText(content.legend[lIndex].label).width);\n        }\n        maxLWidth = Math.ceil(maxLWidth);\n        maxLWidth += options.pixelsLegendSquare + 8;\n        var legendEntriesPerLine = Math.floor((remainingWidth - options.paddingPixelsHorizontal * 2) / maxLWidth);\n        var lLReqHeight = Math.ceil(content.legend.length / legendEntriesPerLine) * options.fontSizeLegend * 1.5;\n        remainingHeight -= lLReqHeight;\n        bottomYPadding += lLReqHeight;\n\n        ctx.strokeStyle = 'rgb(0, 0, 0)';\n        ctx.fillStyle = options.fillColorLegend;\n        var bSX, bSY;\n        ctx.beginPath();\n        ctx.moveTo(bSX = leftXPadding, bSY = topYPadding + remainingHeight);\n        ctx.lineTo(bSX + remainingWidth, bSY);\n        ctx.lineTo(bSX + remainingWidth, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY);\n        ctx.stroke();\n        ctx.fill();\n\n        for (lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          var legLine = Math.floor(lIndex / legendEntriesPerLine);\n          var legCol = lIndex % legendEntriesPerLine;\n          ctx.fillStyle = content.legend[lIndex].color;\n          var boxX = bSX + legCol * maxLWidth + 3, boxY = bSY + legLine * options.fontSizeLegend * 1.5 + options.fontSizeLegend * 0.5;\n          ctx.beginPath();\n          ctx.moveTo(boxX, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY);\n          ctx.fill();\n          ctx.stroke();\n\n          ctx.textAlign = 'left';\n          ctx.fillStyle = 'rgb(0, 0, 0)';\n          ctx.fillText(content.legend[lIndex].label, boxX + 3 + options.pixelsLegendSquare, boxY + options.fontSizeLegend * 0.5);\n        }\n\n        ctx.restore();\n      }\n\n      /* Draw x-axis label of bar chart */\n      var bottomYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n      if (content.xAxis != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeAxes, family: options.font });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.xAxis, (width - remainingWidth) + remainingWidth / 2, topYPadding + remainingHeight - bottomYPadding);\n        remainingHeight -= options.fontSizeAxes * 1.5;\n        bottomYPadding += options.fontSizeAxes * 1.5;\n        ctx.restore();\n      }\n\n      var widthPerBar = remainingWidth / content.data.length;\n\n      /* Draw x-axis top labels */\n      if (content.topLabels != null) {\n        ctx.save();\n        ctx.textAlign = 'center';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n        remainingHeight -= options.fontSizeLabels * 1.5;\n        topYPadding += options.fontSizeLabels * 1.5;\n        for (index = 0; index < content.topLabels.length; ++index) {\n          ctx.fillText(\n            content.topLabels[index],\n            leftXPadding + index * widthPerBar + widthPerBar / 2,\n            topYPadding - options.fontSizeLabels / 2\n          );\n        }\n        ctx.restore();\n      }\n\n      /* Draw x-axis labels */\n      ctx.save();\n      var reqWidth = 0;\n      if (content.dataTags != null) {\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontDataTags, family: options.font });\n        var dataTags = content.dataTags;\n        for (index = 0; index < dataTags.length; ++index) {\n          if (Array.isArray(dataTags[index])) {\n            for (var index2 = 0; index2 < dataTags[index].length; ++index2) {\n              reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index][index2]).width + 5));\n            }\n          } else {\n            reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index]).width + 5));\n          }\n        }\n      }\n\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n      var computedBarPadding = Math.floor((widthPerBar * options.paddingPercentBars) / 2);\n      var wwh = widthPerBar - computedBarPadding * 2;\n      if (wwh < reqWidth) {\n        computedBarPadding -= Math.ceil((reqWidth - wwh) / 2);\n        computedBarPadding = Math.max(0, computedBarPadding);\n      } else if (options.maxWidthBars > 0 && wwh > options.maxWidthBars) {\n        computedBarPadding = Math.floor((widthPerBar - options.maxWidthBars) / 2);\n      }\n      var maxTextWidth = 0, maxTextStackSize = 1;\n      for (index = 0; index < content.labels.length; ++index) {\n        var tLabel = content.labels[index];\n        if (Array.isArray(tLabel)) {\n          maxTextStackSize = Math.max(maxTextStackSize, tLabel.length);\n          for (index2 = 0; index2 < tLabel.length; ++index2) {\n            maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel[index2]).width);\n          }\n        } else maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel).width);\n      }\n      var xLabelsRotated = false;\n      if (maxTextWidth > widthPerBar - computedBarPadding) {\n        ctx.textAlign = 'right';\n        ctx.rotate(Math.PI * 1.5);\n        xLabelsRotated = true;\n      } else {\n        ctx.textAlign = 'center';\n      }\n      var lastLabelY = -options.fontSizeLabels;\n      for (index = 0; index < content.labels.length; ++index) {\n        var cLabel = content.labels[index];\n        var x = leftXPadding + index * widthPerBar + widthPerBar / 2, y = topYPadding + remainingHeight - options.fontSizeLabels / 2;\n        if (xLabelsRotated) {\n          y = topYPadding + remainingHeight - maxTextWidth + 5;\n          y = [x, x = -y][0];\n\n          if (y < lastLabelY + options.fontSizeLabels) continue;\n          lastLabelY = y;\n        }\n        var yUp = options.fontSizeLabels * (maxTextStackSize - 1);\n        if (Array.isArray(cLabel)) {\n          if (xLabelsRotated) {\n            yUp = options.fontSizeLabels * (cLabel.length - 1.5);\n            yUp /= 2;\n          }\n          for (index2 = 0; index2 < cLabel.length; ++index2) {\n            ctx.fillText(cLabel[index2], x, y - yUp);\n            yUp -= options.fontSizeLabels;\n          }\n        } else {\n          if (xLabelsRotated) yUp = -options.fontSizeLabels * 0.25;\n          ctx.fillText(cLabel, x, y - yUp);\n        }\n      }\n      if (xLabelsRotated) {\n        remainingHeight -= maxTextWidth + 5;\n        bottomYPadding += maxTextWidth + 5;\n      } else {\n        var remVal = options.fontSizeLabels * maxTextStackSize;\n        remVal += options.fontSizeLabels * 0.5;\n        remainingHeight -= remVal;\n        bottomYPadding += remVal;\n      }\n      ctx.restore();\n\n      /* Draw boundaries */\n      var boundX1 = leftXPadding, boundX2 = leftXPadding + remainingWidth;\n      var boundY1 = topYPadding, boundY2 = topYPadding + remainingHeight;\n\n      for (index = 0; index < content.labels.length; ++index) labelPositions[index] = {\n        xStart: leftXPadding + index * widthPerBar,\n        xEnd: leftXPadding + (1 + index) * widthPerBar,\n        yStart: boundY1, yEnd: boundY2\n      }\n\n      ctx.save();\n      ctx.strokeStyle = 'rgb(0, 0, 0)';\n      ctx.beginPath();\n      if (content.topLabels != null) {\n        ctx.moveTo(boundX2, boundY1);\n        ctx.lineTo(boundX1, boundY1);\n      } else {\n        ctx.moveTo(boundX1, boundY1);\n      }\n      ctx.lineTo(boundX1, boundY2);\n      ctx.lineTo(boundX2, boundY2);\n      if (content.topLabels != null) ctx.lineTo(leftXPadding + remainingWidth, topYPadding);\n      ctx.stroke();\n      ctx.restore();\n\n      /* Draw top label */\n      if (content.topLabel != null) {\n        ctx.save();\n        ctx.textAlign = 'right';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n        ctx.fillText(content.topLabel, leftXPadding - 3, topYPadding - options.fontSizeLabels / 2);\n        ctx.restore();\n      }\n\n      /* Draw y-axis label of bar chart */\n      if (content.yAxis != null) {\n        ctx.save();\n        ctx.rotate(Math.PI * 1.5);\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeAxes, family: options.font });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.yAxis, -(topYPadding + remainingHeight / 2), leftXDrawYLabel);\n        ctx.restore();\n      }\n\n      /* Draw y-axis labels */\n      ctx.save();\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.20)';\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTicks, family: options.font });\n      ctx.textAlign = 'right';\n      var tickMeta = Helpers.getLinearTicks(0, maxChartValue, Math.max(2, remainingHeight / (options.fontSizeTicks * (1 + options.paddingPercentTicks))));\n      var alpha = maxChartValue / options.fontSizeTicks;\n      maxChartValue = tickMeta[1];\n      if (maxChartValue > 1) maxChartValue += Math.ceil(alpha);\n      else maxChartValue += alpha;\n      var ticks = [];\n      while (tickMeta[0] <= tickMeta[1]) {\n        ticks.push(tickMeta[0]);\n        tickMeta[0] += tickMeta[2];\n      }\n      for (index = 0; index < ticks.length; ++index) {\n        var tickHeight = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, ticks[index]));\n        if (tickHeight < 0) continue;\n        if (options.scaleStyle == 'log2' && ticks[index] !== 0) ticks[index] = Math.round(Math.pow(2, ticks[index]));\n        else ticks[index] = Math.floor(ticks[index] * 100) / 100;\n        if (options.tickFormatter != null && typeof options.tickFormatter === 'function') {\n          ctx.fillText(options.tickFormatter(ticks[index]).toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        } else {\n          ctx.fillText(ticks[index].toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        }\n        if (index == 0) continue;\n        ctx.beginPath();\n        ctx.moveTo(leftXPadding, topYPadding + remainingHeight - tickHeight);\n        ctx.lineTo(leftXPadding + remainingWidth, topYPadding + remainingHeight - tickHeight);\n        ctx.stroke();\n      }\n      ctx.restore();\n\n      if (content.bars != null && Array.isArray(content.bars)) {\n        ctx.save();\n        for (index = 0; index < content.bars.length; ++index) {\n          var cBar = content.bars[index];\n          if (cBar.value > maxChartValue) continue;\n          var renderBarY = topYPadding + remainingHeight - Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, cBar.value));\n          ctx.strokeStyle = cBar.style;\n          ctx.fillStyle = cBar.style;\n          ctx.beginPath();\n          ctx.moveTo(boundX1, renderBarY);\n          ctx.lineTo(boundX2, renderBarY);\n          ctx.stroke();\n          ctx.fill();\n        }\n        ctx.restore();\n      }\n\n      /* Draw bars */\n      ctx.save();\n      var lastData = null;\n      for (index = 0; index < content.data.length; ++index) {\n        var fillColorForIndex = null;\n        var strokeColorForIndex = null;\n        if (content.fillColor != null) {\n          if (Array.isArray(content.fillColor)) fillColorForIndex = ctx.fillStyle = content.fillColor[index];\n          else ctx.fillStyle = content.fillColor;\n        } else ctx.fillStyle = options.fillColorBars;\n        if (content.strokeColor != null) {\n          if (Array.isArray(content.strokeColor)) strokeColorForIndex = ctx.strokeStyle = content.strokeColor[index];\n          else ctx.strokeStyle = content.strokeColor;\n        } else ctx.strokeStyle = options.strokeColorBars;\n        var v = content.data[index];\n        var vIsArr = Array.isArray(v);\n        var renderStartX = leftXPadding + widthPerBar * index;\n        if (vIsArr && options.barStyle === 'stacked') {\n          var runningValue = 0, lastHeight = 0;\n          for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n            if (fillColorForIndex != null && Array.isArray(fillColorForIndex)) {\n              ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n            }\n            if (strokeColorForIndex != null && Array.isArray(strokeColorForIndex)) {\n              ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n            }\n\n            runningValue += v[drawIndex];\n            var renderBarHeight = Math.floor(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, runningValue));\n            var renderUpToY = topYPadding + remainingHeight - renderBarHeight;\n            if (Math.abs(renderBarHeight - lastHeight) < options.stackedBarPadding + 2) {\n              lastHeight = renderBarHeight;\n              continue;\n            }\n\n            var barPadP = drawIndex > 0 ? options.stackedBarPadding : 0;\n            var tSX, tSY;\n            var tEX, tEY;\n            ctx.beginPath();\n            ctx.moveTo(tSX = renderStartX + computedBarPadding, tSY = topYPadding + remainingHeight - lastHeight - barPadP);\n            ctx.lineTo(renderStartX + computedBarPadding, renderUpToY);\n            ctx.lineTo(tEX = renderStartX + (widthPerBar - 1) - computedBarPadding, tEY = renderUpToY);\n            ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight - lastHeight - barPadP);\n            if (drawIndex > 0) ctx.lineTo(tSX, tSY);\n            ctx.stroke();\n            ctx.fill();\n            var hint;\n            if (content.hints != null && content.hints[index] != null && (hint = content.hints[index][drawIndex]) != null) {\n              this.mouseListeners.push(function(index, drawIndex, hint, sx, sy, ex, ey, x, y) {\n                var minX = Math.min(sx, ex), maxX = Math.max(sx, ex);\n                var minY = Math.min(sy, ey), maxY = Math.max(sy, ey);\n                if (x < minX || x > maxX || y < minY || y > maxY) return null;\n                return { index: index, drawIndex: drawIndex, rect: { left: minX, right: maxX, top: minY, bottom: maxY }, text: hint.split('\\n') };\n              }.bind(this, index, drawIndex, hint, tSX, tSY, tEX, tEY));\n            }\n\n            var tagText;\n            if (tSY - renderUpToY > options.fontDataTags * 1.25 && content.dataTags != null && (tagText = content.dataTags[index]) != null && (tagText = tagText[drawIndex]) != null) {\n              var oFS = ctx.fillStyle;\n              ctx.fillStyle = 'rgb(0, 0, 0)';\n              ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontDataTags, family: options.font });\n              ctx.textAlign = 'center';\n              ctx.fillText(tagText, renderStartX + widthPerBar / 2, tSY - options.fontDataTags * 0.25);\n              ctx.fillStyle = oFS;\n            }\n\n            lastHeight = renderBarHeight;\n          }\n\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY - 3);\n          }\n        } else if (options.barStyle === 'line') {\n          if (vIsArr) {\n            var rbx = renderStartX + widthPerBar / 2;\n\n            var lDu;\n            if (options.fillRegion === 'background') {\n              lDu = lastData;\n              if (Array.isArray(lDu)) lDu = lDu[0];\n              if (lDu != null) {\n                var sFS = ctx.fillStyle\n                ctx.fillStyle = lDu.color\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1)\n                ctx.fillStyle = sFS\n              }\n            }\n\n            var nLData = [];\n            for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n              var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v[drawIndex]));\n              var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n\n              var rby = renderUpToY3;\n              if (lastData != null) {\n                var tLX, tLY;\n                if (Array.isArray(lastData)) {\n                  tLX = (lastData[drawIndex] || { }).x;\n                  tLY = (lastData[drawIndex] || { }).y;\n                } else {\n                  tLX = lastData.x;\n                  tLY = lastData.y;\n                }\n\n                if (tLX && tLY) {\n                  if (Array.isArray(strokeColorForIndex)) {\n                    ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n                  } else ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n\n              if (Array.isArray(fillColorForIndex)) {\n                ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n              }\n              if (Array.isArray(strokeColorForIndex)) {\n                ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n              }\n\n              ctx.beginPath();\n              ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n              ctx.stroke();\n              ctx.fill();\n\n              nLData[drawIndex] = { x: rbx, y: rby, color: ctx.fillStyle };\n            }\n            lastData = nLData;\n            if (lDu != null && lDu.color != lastData[0].color) this.fillRegions.push({\n              x: lastData[0].x,\n              y: lastData[0].y,\n              prev: lDu.color,\n              next: lastData[0].color\n            })\n\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index]\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - (remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value)), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          } else {\n            var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n            var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n\n            var rbx = renderStartX + widthPerBar / 2, rby = renderUpToY3;\n            var lDu;\n            if (options.fillRegion === 'background') {\n              if (lastData != null) {\n                lDu = lastData;\n                if (Array.isArray(lDu)) lDu = lDu[0];\n                var sFS = ctx.fillStyle\n                ctx.fillStyle = lDu.color\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1)\n                ctx.fillStyle = sFS\n              }\n            }\n            ctx.beginPath();\n            ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n            ctx.stroke();\n            ctx.fill();\n\n            if (lastData != null) {\n              if (Array.isArray(lastData)) {\n                var tLX, tLY;\n                for (var key in lastData) {\n                  if (!lastData.hasOwnProperty(key)) continue;\n                  tLX = lastData[key].x;\n                  tLY = lastData[key].y;\n                  if (tLX && tLY) {\n                    ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                    ctx.beginPath();\n                    ctx.moveTo(tLX, tLY);\n                    ctx.lineTo(rbx, rby);\n                    ctx.stroke();\n                  }\n                }\n              } else {\n                var tLX = lastData.x, tLY = lastData.y;\n                if (tLX && tLY) {\n                  ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n            }\n\n            lastData = { x: rbx, y: rby, color: ctx.fillStyle };\n            if (lDu != null && lDu.color != lastData.color) this.fillRegions.push({\n              x: lastData.x,\n              y: lastData.y,\n              prev: lDu.color,\n              next: lastData.color\n            })\n\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index]\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - (remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value)), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          }\n\n          var hint;\n          if (content.hints != null && (hint = content.hints[index]) != null) {\n            this.mouseListeners.push(function(index, hint, sx, sy, ex, ey, x, y) {\n              var minX = Math.min(sx, ex), maxX = Math.max(sx, ex);\n              var minY = Math.min(sy, ey), maxY = Math.max(sy, ey);\n              if (x < minX || x > maxX || y < minY || y > maxY) return null;\n              return { index: index, drawIndex: drawIndex, rect: { left: minX, right: maxX, top: minY, bottom: maxY }, text: hint.split('\\n') };\n            }.bind(this, index, hint, rbx - 1, topYPadding, rbx + 1, topYPadding + remainingHeight));\n          }\n        } else {\n          if (vIsArr) v = Helpers.avg(v);\n          var renderBarHeight2 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n          var renderUpToY2 = topYPadding + remainingHeight - renderBarHeight2;\n          ctx.beginPath();\n          ctx.moveTo(renderStartX + computedBarPadding, topYPadding + remainingHeight);\n          ctx.lineTo(renderStartX + computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight);\n          ctx.stroke();\n          ctx.fill();\n\n          if (options.barStyle === 'error') {\n            var val;\n            if ((val = content._data_standard_error[index]) != 0) {\n              var renderBarError = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, val));\n              ctx.beginPath();\n              var wiskerWidth = Math.round((widthPerBar - computedBarPadding * 2) / 8);\n              var x_ = leftXPadding + widthPerBar * index + widthPerBar / 2;\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.moveTo(x_, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_, renderUpToY2 - renderBarError);\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.stroke();\n            }\n          }\n\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY2 - 3);\n          }\n        }\n      }\n      ctx.restore();\n\n      if (this.currentHint != null) {\n        ctx.save();\n        var hRect = this.currentHint.rect, hints = this.currentHint.text;\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeHint, family: options.font });\n        ctx.textAlign = 'left';\n        var boxWidth = 0;\n        for (index = 0; index < hints.length; ++index) {\n          boxWidth = Math.max(boxWidth, Math.ceil(ctx.measureText(hints[index]).width));\n        }\n        var boxWidthPadding = 5;\n        var lineHeight = options.fontSizeHint * 1.5;\n        var boxHeight = hints.length * lineHeight;\n        var drawX = hRect.right + 10, drawY = (hRect.top + hRect.bottom) / 2;\n        boxWidth += boxWidthPadding * 2;\n        if (drawX + boxWidth > width) {\n          drawX = hRect.left - boxWidth - 10;\n        }\n        if (drawY - boxHeight / 2 < 0) {\n          drawY = Math.ceil(boxHeight / 2) + 1;\n        } else if (drawY + boxHeight / 2 > height) {\n          drawY = height - boxHeight / 2 - 1;\n        }\n        ctx.clearRect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.beginPath();\n        ctx.rect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.stroke();\n        for (index = 0; index < hints.length; ++index) {\n          ctx.fillText(hints[index], drawX + boxWidthPadding, drawY - boxHeight / 2 + options.fontSizeHint + index * lineHeight);\n        }\n        ctx.restore();\n      }\n\n      ctx.translate(0.5, 0.5);\n\n      this.labelPositions = labelPositions;\n    };\n\n    return BarChart;\n  })();\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = BarChart;\n  } else {\n    window.BarChart = BarChart;\n  }\n})();\n"],"sourceRoot":""}